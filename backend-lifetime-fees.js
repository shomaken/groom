/**
 * Backend Script: Fetch Solana Token Lifetime Fees from Bags.fm API
 * 
 * This script fetches the total lifetime fees for a Solana token using the Bags.fm API.
 * The lifetime fees represent the total trading fees generated by the token.
 * 
 * Usage:
 *   - Set BAGS_API_KEY environment variable
 *   - Call getTokenLifetimeFees(tokenMint) function
 *   - Or run as Express server and POST to /api/lifetime-fees
 */

const fetch = require('node-fetch'); // npm install node-fetch@2

// Constants
const LAMPORTS_PER_SOL = 1000000000; // 1 SOL = 1,000,000,000 lamports
const BAGS_API_BASE = 'https://public-api-v2.bags.fm';

/**
 * Fetch lifetime fees for a Solana token from Bags.fm API
 * @param {string} tokenMint - The Solana token mint address (Base58)
 * @returns {Promise<Object>} Formatted lifetime fees data
 */
async function getTokenLifetimeFees(tokenMint) {
  try {
    // Validate inputs
    if (!tokenMint) {
      throw new Error('Token mint address is required');
    }

    const API_KEY = process.env.BAGS_API_KEY;
    if (!API_KEY) {
      throw new Error('BAGS_API_KEY environment variable is required');
    }

    // Construct API URL
    const url = `${BAGS_API_BASE}/token-launch/lifetime-fees?tokenMint=${tokenMint}`;
    
    console.log(`Fetching lifetime fees for token: ${tokenMint}`);
    console.log(`API URL: ${url}`);

    // Make authenticated request
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'x-api-key': API_KEY,
        'Content-Type': 'application/json',
        'User-Agent': 'GROOM-Website/1.0'
      }
    });

    console.log(`Response status: ${response.status}`);

    // Handle non-200 responses
    if (!response.ok) {
      const errorText = await response.text();
      console.error('API Error Response:', errorText);
      
      if (response.status === 401) {
        throw new Error('Invalid API key - check your BAGS_API_KEY');
      } else if (response.status === 404) {
        throw new Error('Token not found - verify the token mint address');
      } else {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }
    }

    // Parse JSON response
    const data = await response.json();
    console.log('Raw API Response:', JSON.stringify(data, null, 2));

    // Extract lifetime fees (could be in different fields)
    const lifetimeFeesLamports = parseInt(
      data.lifetimeFees || 
      data.fees || 
      data.totalFees || 
      data.lifetime_fees || 
      0
    );

    if (lifetimeFeesLamports === 0) {
      console.warn('Warning: Lifetime fees returned as 0 - token may be new or have no trading activity');
    }

    // Convert lamports to SOL
    const lifetimeFeesSOL = lifetimeFeesLamports / LAMPORTS_PER_SOL;

    // Estimate USD value (approximate SOL price)
    const estimatedSOLPrice = 200; // Update this with real SOL price if needed
    const lifetimeFeesUSD = lifetimeFeesSOL * estimatedSOLPrice;

    // Format response
    const result = {
      success: true,
      tokenMint: tokenMint,
      lifetimeFees: {
        lamports: lifetimeFeesLamports,
        sol: parseFloat(lifetimeFeesSOL.toFixed(6)),
        solFormatted: `${lifetimeFeesSOL.toFixed(4)} SOL`,
        usdEstimate: parseFloat(lifetimeFeesUSD.toFixed(2)),
        usdFormatted: `$${lifetimeFeesUSD.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`
      },
      timestamp: new Date().toISOString(),
      source: 'Bags.fm API'
    };

    console.log('Formatted Result:', JSON.stringify(result, null, 2));
    return result;

  } catch (error) {
    console.error('Error fetching lifetime fees:', error.message);
    
    return {
      success: false,
      error: error.message,
      tokenMint: tokenMint,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * Express.js Server Implementation (Optional)
 * Uncomment to run as a web server
 */
/*
const express = require('express'); // npm install express
const cors = require('cors'); // npm install cors

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(express.json());

// POST endpoint to get lifetime fees
app.post('/api/lifetime-fees', async (req, res) => {
  try {
    const { tokenMint } = req.body;
    
    if (!tokenMint) {
      return res.status(400).json({
        success: false,
        error: 'tokenMint is required in request body'
      });
    }

    const result = await getTokenLifetimeFees(tokenMint);
    res.json(result);

  } catch (error) {
    console.error('Server error:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Health check: http://localhost:${PORT}/health`);
  console.log(`API endpoint: POST http://localhost:${PORT}/api/lifetime-fees`);
});
*/

// Example usage
async function example() {
  // Example token mint (replace with your actual token)
  const exampleTokenMint = '9mAnyxAq8JQieHT7Lc47PVQbTK7ZVaaog8LwAbFzBAGS';
  
  console.log('=== Example Usage ===');
  const result = await getTokenLifetimeFees(exampleTokenMint);
  
  if (result.success) {
    console.log(`✅ Success! Token lifetime fees: ${result.lifetimeFees.solFormatted} (${result.lifetimeFees.usdFormatted})`);
  } else {
    console.log(`❌ Error: ${result.error}`);
  }
}

// Export for use in other modules
module.exports = {
  getTokenLifetimeFees,
  LAMPORTS_PER_SOL
};

// Run example if this file is executed directly
if (require.main === module) {
  example();
}